trigger:
- master

pr: none

pool:
  vmImage: ubuntu-latest

variables: 
  - name: packageDiractory
    value: "$(System.DefaultWorkingDirectory)/packages/infrastructure/stage-1"

  - name: subscriptionIdDev
    value: "32547ca3-abba-45c8-b76e-46a590958b5e" 

  - name: serviceName
    value: "alvnodevelopment" 

jobs:
  - job: Deploy
    steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform v0.13.0
        inputs:
          terraformVersion: "0.13.0"

      - task: TerraformTaskV1@0
        displayName: Terraform init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AlvNo-Dev'
          backendAzureRmResourceGroupName: 'Common'
          backendAzureRmStorageAccountName: $(serviceName)
          backendAzureRmContainerName: 'terraformstatus'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: $(packageDiractory) 

      - task: TerraformTaskV1@0
        displayName: Terraform validate
        inputs:
          provider: azurerm 
          command: validate 
          workingDirectory: $(packageDiractory)

      - task: TerraformTaskV1@0
        displayName: Terraform plan -out=tfplan
        inputs:
          provider: azurerm 
          command: plan
          commandOptions: '-var "docker_tag=Latest" -var "subscription_id=$(subscriptionIdDev)" -var "service_name=$(serviceName)" -out=tfplan'
          environmentServiceNameAzureRM: 'AlvNo-Dev'
          workingDirectory: $(packageDiractory)

      - task: TerraformTaskV1@0
        displayName: Terraform apply tfplan
        inputs:
          provider: azurerm 
          command: apply
          commandOptions: tfplan
          environmentServiceNameAzureRM: 'AlvNo-Dev'
          workingDirectory: $(packageDiractory)