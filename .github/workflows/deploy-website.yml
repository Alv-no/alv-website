name: Deploy test website

on:
  pull_request:
  push:
    branches:
      - master
      - main

env:
  ENV: test
  TAG: en-eller-annen-tag

jobs:
  get-secrets:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    outputs:
      alvHostname: ${{ steps.get_secrets.outputs.alvHostname }}
      sanityToken: ${{ steps.get_secrets.outputs.sanityToken }}
      youtubeApiToken: ${{ steps.get_secrets.outputs.youtubeApiToken }}
      # spAlvtimeAdminClientId: ${{ steps.get_secrets.outputs.spAlvtimeAdminClientId }}
      # spAlvtimeAdminRbacSecret: ${{ steps.get_secrets.outputs.spAlvtimeAdminRbacSecret }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to Azure and set subscription
        shell: bash
        run: |
          az login --service-principal \
            -u "${{ vars.AZURE_CLIENT_ID }}" \
            -p "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ vars.TENANT_ID }}"
          az account set --subscription "${{ vars.SUBSCRIPTION_ID_TEST }}"

      - name: Get Secret from Azure Key Vault
        id: get_secrets
        run: |
          # Get secrets from key vault
          ALV_HOSTNAME=$(az keyvault secret show --name "alv-hostname" --vault-name "${{ vars.KEY_VAULT_TEST }}" --query "value" -o tsv)
          SANITY_TOKEN=$(az keyvault secret show --name "sanity-token" --vault-name "${{ vars.KEY_VAULT_TEST }}" --query "value" -o tsv)
          YOUTUBE_API_TOKEN=$(az keyvault secret show --name "youtube-api-token" --vault-name "${{ vars.KEY_VAULT_TEST }}" --query "value" -o tsv)
          # SP_ALVTIME_ADMIN_CLIENT_ID=$(az keyvault secret show --name "sp-alvtime-admin-client-id" --vault-name "${{ vars.KEY_VAULT_TEST }}" --query "value" -o tsv)
          # SP_ALVTIME_ADMIN_RBAC_SECRET=$(az keyvault secret show --name "sp-alvtime-admin-rbac-secret" --vault-name "${{ vars.KEY_VAULT_TEST }}" --query "value" -o tsv)

          # Set job outputs
          echo "alvHostname=$ALV_HOSTNAME" >> $GITHUB_OUTPUT
          echo "sanityToken=$SANITY_TOKEN" >> $GITHUB_OUTPUT
          echo "youtubeApiToken=$YOUTUBE_API_TOKEN" >> $GITHUB_OUTPUT
          # echo "spAlvtimeAdminClientId=$SP_ALVTIME_ADMIN_CLIENT_ID" >> $GITHUB_OUTPUT
          # echo "spAlvtimeAdminRbacSecret=$SP_ALVTIME_ADMIN_RBAC_SECRET" >> $GITHUB_OUTPUT
 
  deploy-website:
    needs: get-secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.28'

      - name: Log in to Azure and set subscription
        shell: bash
        run: |
          az login --service-principal \
            -u "${{ vars.AZURE_CLIENT_ID }}" \
            -p "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ vars.TENANT_ID }}"
          az account set --subscription "${{ vars.SUBSCRIPTION_ID_TEST }}"
  
      - name: Build, push and deploy
        shell: bash
        run: |
          ALV_HOSTNAME=${{ needs.get-secrets.outputs.alvHostname }}
          SANITY_TOKEN=${{ needs.get-secrets.outputs.sanityToken }}
          YOUTUBE_API_TOKEN=${{ needs.get-secrets.outputs.youtubeApiToken }}
          # SP_ALVTIME_ADMIN_CLIENT_ID=${{ needs.get-secrets.outputs.spAlvtimeAdminClientId }}
          # SP_ALVTIME_ADMIN_RBAC_SECRET=${{ needs.get-secrets.outputs.spAlvtimeAdminRbacSecret }}

          # Authenticate Azure container registry
          docker login ${{ vars.CONTAINER_REGISTRY }} \
            --username ${{ vars.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }}

          # Source services
          source ./packages/website/website-service.sh
          source ./bash-services/aks-service.sh
          source ./bash-services/helm-service.sh
          
          # # Build
          # buildWebsite $ENV $SANITY_TOKEN $YOUTUBE_API_TOKEN ${{ vars.CONTAINER_REGISTRY }} $TAG
          
          # # Push
          # pushWebsite ${{ vars.CONTAINER_REGISTRY }} $TAG
          
          # Get AKS credentials and configure kubectl
          getAksCredentials \
            ${{ vars.AZURE_SUBSCRIPTION_TEST }} \
            ${{ vars.AZURE_RESOURCE_GROUP_NAME_TEST }} \
            ${{ vars.KUBERNETES_CLUSTER_NAME_TEST }} 

          # Deploy
          helmLoginAndPull \
            ${{ vars.AZURE_CLIENT_ID }} \
            ${{ vars.AZURE_CLIENT_SECRET }} \
            ${{ vars.CONTAINER_REGISTRY }}
          
          deployWebsite $ALV_HOSTNAME \
            ${{ vars.CONTAINER_REGISTRY }} \
            $TAG